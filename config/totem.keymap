// mostly copied from: https://github.com/infused-kim/zmk-config/tree/chocofi/main

#define ZMK_POINTING_DEFAULT_MOVE_VAL 700  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 70    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

#define "./keypos.h"

#define BASE 0
#define NUMSYM 1
#define ADJ 2

/ {
    behaviors {
        //////////////////////////////////////////////////////////////////
        // Positional Homerow mods
        // Homerow mods that prevent accidental activations when rolling keys,
        // such as when typing `st` or `ne` on colemak-dh layouts or `as` on
        // qwerty.
        //
        // Works by only allowing a mod to activate within tapping-term if
        // it's on the opposite side of the keyboard or on the same side thumb
        // keys.
        // Further optimization using urob's timerless homerow mods method:
        // https://github.com/urob/zmk-config#timeless-homerow-mods

        #define HM_TAPPING_TERM 300
        #define HM_TAPPING_TERM_FAST 200
        #define HM_PRIOR_IDLE 0
        #define HM_QUICK_TAP 0

        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <HM_QUICK_TAP>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <HM_QUICK_TAP>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };

        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.

        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <HM_QUICK_TAP>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <HM_QUICK_TAP>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };

        /////////////////////////////////////////////////////////////////////////////
        /*
        * Tap dancing shift lock and adj layer
        *
        * Usage: &td_sft_adj
        * Tap: Toggle shift lock
        * Double Tap: Toggle adj layer
        */

        td_sft_adj: td_shiftlock_adj {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kt RSHFT>, <&tog 2>;
        };

        /////////////////////////////////////////////////////////////////////////////
        // Swap the default and the shifted
        /*
        * Usage: &mm_tilde
        * Tap: tilde(~)
        * Shifted Tap: grave(`)
        */

        mm_tilde: tilde_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp TILDE>, <&kp GRAVE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        /*
        * Usage: &mm_pipe
        * Tap: pipe(|)
        * Shifted Tap: backslash(\)
        */

        mm_pipe: pipe_backslash {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PIPE>, <&kp BSLH>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};

/////////////////////////////////////////////////////////////////////////////
// generated by keymap editor

/ {
    keymap {
        compatible = "zmk,keymap";

        base {
            label = "BASE";
            bindings = <
       &kp SQT       &kp COMMA            &kp DOT        &kp P         &kp Y      &kp F                  &kp G         &kp C          &kp R                &kp L
       &hm_l LGUI A  &hm_shift_l LSHFT O  &hm_l LCTRL E  &hm_l LALT U  &kp I      &kp D                  &hm_r RALT H  &hm_r RCTRL T  &hm_shift_r RSHFT N  &hm_r RGUI S
&none  &kp SEMI      &kp Q                &kp J          &kp K         &kp X      &kp B                  &kp M         &kp W          &kp V                &kp Z         &none
                                          &kp TAB        &lt 2 SPACE   &kp RET    &hm_shift_r RSHFT TAB  &lt 1 BSPC    &td_sft_adj
            >;
        };

        numsym {
            label = "NUMSYM";
            bindings = <
       &kp N7     &kp N8    &kp N9    &kp N0     &kp N6       &none   &none     &none      &none      &none
       &kp N4     &kp N3    &kp N2    &kp N1     &kp N5       &none   &sk RALT  &sk RCTRL  &sk RSHFT  &sk RGUI
&none  &mm_tilde  &kp FSLH  &mm_pipe  &kp LBKT   &kp RBKT     &none   &none     &none      &none      &none     &none
                            &kp DOT   &kp MINUS  &kp EQUAL    &trans  &trans    &trans
            >;
        };

        adj {
            label = "ADJ";
            bindings = <
       &none         &none         &none         &bt BT_CLR    &bt BT_CLR_ALL    &mkp RCLK  &mmv MOVE_LEFT  &mmv MOVE_RIGHT  &mmv MOVE_DOWN  &mmv MOVE_UP
       &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_SEL 4      &mkp LCLK  &kp LEFT        &kp RIGHT        &kp DOWN        &kp UP
&none  &kp C_BRI_UP  &kp C_BRI_DN  &kp C_VOL_UP  &kp C_VOL_DN  &none             &kp F2     &msc SCRL_LEFT  &msc SCRL_RIGHT  &msc SCRL_DOWN  &msc SCRL_UP  &none
                                   &trans        &trans        &trans            &kp F11    &kp F5          &kp F4
            >;
        };
    };
};
