#define ZMK_POINTING_DEFAULT_MOVE_VAL 1000  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 70    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define NUM_SYM 1
#define ADJ 2
#define NUM 3
#define SYM_FN 4

// mostly copied from: https://github.com/infused-kim/zmk-config/tree/chocofi/main
/////////////////////////////////////////////////////////////////////////////
// key positions
/*                              36 KEY MATRIX / LAYOUT MAPPING

   ╭────────────────────┬────────────────────╮        ╭─────────────────────┬─────────────────────╮
   │  0   1   2   3   4 │  5   6   7   8   9 │        │ LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 │
   │ 10  11  12  13  14 │ 15  16  17  18  19 │        │ LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 │
│ 20 21  22  23  24  25 │ 26  27  28  29  30 31│  │ LB5 LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 RB5│
   ╰───────╮ 32  33  34 │ 35  36  37 ╭───────╯        ╰───────╮ LH2 LH1 LH0 │ RH0 RH1 RH2 ╭───────╯
           ╰────────────┴────────────╯                        ╰─────────────┴─────────────╯             */

#pragma once

#define LT0  4  // left-top row
#define LT1  3
#define LT2  2
#define LT3  1
#define LT4  0
#define RT0  5  // right-top row
#define RT1  6
#define RT2  7
#define RT3  8
#define RT4  9
#define LM0 14  // left-middle row
#define LM1 13
#define LM2 12
#define LM3 11
#define LM4 10
#define RM0 15  // right-middle row
#define RM1 16
#define RM2 17
#define RM3 18
#define RM4 19
#define LB0 25  // left-bottom row
#define LB1 24
#define LB2 23
#define LB3 22
#define LB4 21
#define LB5 20
#define RB0 26  // right-bottom row
#define RB1 27
#define RB2 28
#define RB3 29
#define RB4 30
#define RB5 31
#define LH0 34  // left thumb keys
#define LH1 33
#define LH2 32
#define RH0 35  // right thumb keys
#define RH1 36
#define RH2 37
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5
#define KEYS_T LH2 LH1 LH0 RH0 RH1 RH2
#define NUM_L LM0 LM1 LM2 LM3 LM4
#define NUM_R RM0 RM1 RM2 RM3 RM4

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
// homerow mods

#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 150

/ {
    behaviors {
        // Positional Homerow mods
        // Homerow mods that prevent accidental activations when rolling keys,
        // such as when typing `st` or `ne` on colemak-dh layouts or `as` on
        // qwerty.
        //
        // Works by only allowing a mod to activate within tapping-term if
        // it's on the opposite side of the keyboard or on the same side thumb
        // keys.
        // Further optimization using urob's timerless homerow mods method:
        // https://github.com/urob/zmk-config#timeless-homerow-mods

        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };

        // Positional Homerow mods for number

        hm_num_l: homerow_num_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <NUM_R>;
            hold-trigger-on-release;
        };

        hm_num_r: homerow_num_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <NUM_L>;
            hold-trigger-on-release;
        };

        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.

        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };

        // /*
        //  * Non-Positional Homerow Mods
        //  * Used for &mm_grescm_gui behavior on left hand.
        //  *
        //  * Usage: &hm LSHFT T
        //  * Tap: T
        //  * Tap-Tap-Hold: Repeat T
        //  * Hold: LSHIFT
        //  */
        // hm: homerow_mods {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     bindings = <&kp>, <&kp>;
        //     flavor = "balanced";
        //     tapping-term-ms = <HM_TAPPING_TERM>;
        //     quick-tap-ms = <200>;
        // };
    };
};

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
// Tap dances

/ {
    behaviors {
        /*
        * Tap dancing sym_fn and num_sym layer
        *
        * Usage: &td_sym_fn
        * Tap: Sticky sym_fn layer
        * Double Tap: To num_sym layer
        */

        td_sym_fn: td_sym_fn {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&sl SYM_FN>, <&to NUM_SYM>;
        };

        /*
        * Tap dancing shift and shift lock
        *
        * Usage: &td_shift
        * Tap: shift, to switch input methods
        * Double Tap: toggle shift lock
        */

        td_shift: td_shift {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp RSHFT>, <&kt RSHFT>;
        };
    };
};

/////////////////////////////////////////////////////////////////////////////

/ {
    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <2 3>;
            layers = <0 1 2>;
            timeout-ms = <50>;
            require-prior-idle-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            label = "BASE";
            bindings = <
       &kp SQT        &kp COMMA            &kp DOT       &kp P          &kp Y           &kp F         &kp G          &kp C         &kp R                &kp L
       &hm_num_l 3 A  &hm_shift_l LSHFT O  &hm_l LALT E  &hm_l LCTRL U  &hm_l LGUI I    &hm_r RGUI D  &hm_r RCTRL H  &hm_r RALT T  &hm_shift_r RSHFT N  &hm_num_r 3 S
&none  &kp SEMI       &kp Q                &kp J         &kp K          &kp X           &kp B         &kp M          &kp W         &kp V                &kp Z          &none
                                           &kp TAB       &td_sym_fn     &kp BSPC        &kp RET       &lt 2 SPACE    &td_shift
            >;
        };

        num_sym {
            label = "NUM_SYM";
            bindings = <
       &trans  &trans                &trans         &kp LBKT        &kp RBKT         &kp PIPE       &kp MINUS       &kp PLUS       &kp FSLH              &kp STAR
       &kp N7  &hm_shift_l LSHFT N8  &hm_l LALT N9  &hm_l LCTRL N0  &hm_l LGUI N5    &hm_r RGUI N6  &hm_r RCTRL N1  &hm_r RALT N2  &hm_shift_r RSHFT N3  &kp N4
&none  &trans  &kp GRAVE             &kp TILDE      &kp LBRC        &kp RBRC         &kp BSLH       &kp UNDER       &kp EQUAL      &kp QMARK             &to 0     &none
                                     &trans         &trans          &trans           &trans         &trans          &trans
            >;
        };

        adj {
            label = "ADJ";
            bindings = <
       &msc SCRL_LEFT  &msc SCRL_RIGHT  &msc SCRL_DOWN  &msc SCRL_UP  &mkp RCLK    &bt BT_CLR_ALL  &bt BT_CLR       &none              &none         &none
       &mmv MOVE_LEFT  &mmv MOVE_RIGHT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mkp LCLK    &bt BT_SEL 4    &bt BT_SEL 0     &bt BT_SEL 1       &bt BT_SEL 2  &bt BT_SEL 3
&none  &kp LEFT        &kp RIGHT        &kp DOWN        &kp UP        &none        &none           &kp C_VOLUME_UP  &kp C_VOLUME_DOWN  &kp C_BRI_UP  &kp C_BRI_DN  &none
                                        &trans          &none         &trans       &none           &none            &none
            >;
        };

        num {
            label = "NUM";
            bindings = <
       &none   &none   &none   &none   &none     &none   &none   &none   &none   &none
       &kp N7  &kp N8  &kp N9  &kp N0  &kp N5    &kp N6  &kp N1  &kp N2  &kp N3  &kp N4
&none  &none   &none   &none   &none   &none     &none   &none   &none   &none   &none   &none
                       &none   &none   &none     &none   &none   &none
            >;
        };

        sym_fn {
            label = "SYM_FN";
            bindings = <
       &kp DQT    &kp LT     &kp GT     &kp LBKT  &kp RBKT     &kp PIPE   &kp MINUS  &kp PLUS   &kp FSLH   &kp STAR
       &kp AMPS   &kp STAR   &kp LPAR   &kp RPAR  &kp PRCNT    &kp CARET  &kp EXCL   &kp AT     &kp HASH   &kp DLLR
&none  &kp COLON  &kp GRAVE  &kp TILDE  &kp LBRC  &kp RBRC     &kp BSLH   &kp UNDER  &kp EQUAL  &kp QMARK  &none     &none
                             &none      &none     &kp F11      &kp F5     &kp F4     &kp F2
            >;
        };
    };
};
