#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// mostly copied from: https://github.com/infused-kim/zmk-config/tree/chocofi/main
/////////////////////////////////////////////////////////////////////////////
// key positions
/*                              36 KEY MATRIX / LAYOUT MAPPING

   ╭────────────────────┬────────────────────╮        ╭─────────────────────┬─────────────────────╮
   │  0   1   2   3   4 │  5   6   7   8   9 │        │ LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 │
   │ 10  11  12  13  14 │ 15  16  17  18  19 │        │ LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 │
│ 20 21  22  23  24  25 │ 26  27  28  29  30 31│  │ LB5 LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 RB5│
   ╰───────╮ 32  33  34 │ 35  36  37 ╭───────╯        ╰───────╮ LH2 LH1 LH0 │ RH0 RH1 RH2 ╭───────╯
           ╰────────────┴────────────╯                        ╰─────────────┴─────────────╯             */

#pragma once

#define LT0  4  // left-top row
#define LT1  3
#define LT2  2
#define LT3  1
#define LT4  0
#define RT0  5  // right-top row
#define RT1  6
#define RT2  7
#define RT3  8
#define RT4  9
#define LM0 14  // left-middle row
#define LM1 13
#define LM2 12
#define LM3 11
#define LM4 10
#define RM0 15  // right-middle row
#define RM1 16
#define RM2 17
#define RM3 18
#define RM4 19
#define LB0 25  // left-bottom row
#define LB1 24
#define LB2 23
#define LB3 22
#define LB4 21
#define LB5 20
#define RB0 26  // right-bottom row
#define RB1 27
#define RB2 28
#define RB3 29
#define RB4 30
#define RB5 31
#define LH0 34  // left thumb keys
#define LH1 33
#define LH2 32
#define RH0 35  // right thumb keys
#define RH1 36
#define RH2 37
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5
#define KEYS_T LH2 LH1 LH0 RH0 RH1 RH2

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
// home row mods

#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 150

/ {
    behaviors {
        // Positional Homerow mods
        // Homerow mods that prevent accidental activations when rolling keys,
        // such as when typing `st` or `ne` on colemak-dh layouts or `as` on
        // qwerty.
        //
        // Works by only allowing a mod to activate within tapping-term if
        // it's on the opposite side of the keyboard or on the same side thumb
        // keys.
        // Further optimization using urob's timerless homerow mods method:
        // https://github.com/urob/zmk-config#timeless-homerow-mods

        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };

        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.

        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;

            // hold-trigger-on-release;
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;

            // hold-trigger-on-release;
        };

        // /*
        //  * Non-Positional Homerow Mods
        //  * Used for &mm_grescm_gui behavior on left hand.
        //  *
        //  * Usage: &hm LSHFT T
        //  * Tap: T
        //  * Tap-Tap-Hold: Repeat T
        //  * Hold: LSHIFT
        //  */
        // hm: homerow_mods {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     bindings = <&kp>, <&kp>;
        //     flavor = "balanced";
        //     tapping-term-ms = <HM_TAPPING_TERM>;
        //     quick-tap-ms = <200>;
        // };
    };
};

/////////////////////////////////////////////////////////////////////////////

#define BASE 0

/ {
    //     combos {
    //         compatible = "zmk,combos";
    //         combo_esc {
    //             timeout-ms = <50>;
    //             key-positions = <0 1>;
    //             bindings = <&kp ESC>;
    //         };
    //         combo_tvp {
    //             timeout-ms = <100>;
    //             key-positions = <11 12 13>;
    //             bindings = <&tog TVP1>;
    //         };
    //     };
    // macros {
    //     gif: gif {
    //         label = "giphy";
    //         compatible = "zmk,behavior-macro";
    //         #binding-cells = <0>;
    //         bindings =
    //             <&macro_press>,
    //             <&kp LSHFT>,
    //             <&macro_tap>,
    //             <&kp N2>,
    //             <&macro_release>,
    //             <&kp LSHFT>,
    //             <&macro_tap>,
    //             <&kp G &kp I &kp F>;
    //     };
    // };

    keymap {
        compatible = "zmk,keymap";

        base {
            label = "BASE";
            bindings = <
             &kp SQT   &kp COMMA     &kp DOT       &kp P          &kp Y               &kp F            &kp G          &kp C         &kp R         &kp S
             &kp A     &hm_l LGUI O  &hm_l LALT E  &hm_l LCTRL U  &kp I               &kp D            &hm_r RCTRL H  &hm_r RALT T  &hm_r RGUI N  &kp SEMI
&lt 2 LSHFT  &kp SEMI  &kp Q         &kp J         &kp K          &kp X               &kp B            &kp M          &kp W         &kp V         &kp Z     &none
                                     &none         &none          &hm_l LSHFT BSPC    &hm_r RSHFT RET  &kp SPACE      &none
            >;
        };

        num_sym_nav_fn {
            label = "NUM_SYM_NAV_FN";
            bindings = <
             &kp SQT   &kp COMMA      &kp DOT        &kp LBKT        &kp RBKT            &kp BSLH         &kp MINUS       &kp EQUAL      &kp FSLH       &kp STAR
             &kp N7    &hm_l LGUI N8  &hm_l LALT N9  &hm_l LCTRL N0  &kp N5              &kp N6           &hm_r RCTRL N1  &hm_r RALT N2  &hm_r RGUI N3  &kp N4
&lt 2 LSHFT  &kp SEMI  &kp LEFT       &kp RIGHT      &kp DOWN        &kp UP              &kp F11          &kp GRAVE       &kp F5         &kp F4         &kp F2    &none
                                      &none          &none           &hm_l LSHFT BSPC    &hm_r RSHFT RET  &kp SPACE       &none
            >;
        };

        tmp {
            bindings = <
        &bt BT_CLR_ALL  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
        &trans          &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "tmp";
        };
    };
};
