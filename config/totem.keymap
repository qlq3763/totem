// mostly copied from: https://github.com/infused-kim/zmk-config/tree/chocofi/main

#define ZMK_POINTING_DEFAULT_MOVE_VAL 700  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 70    // default: 10
#define QUICK_TAP 0
#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 300
#define HM_PRIOR_IDLE 0
#define COMBO_TERM 200
#define COMBO_IDLE 0

#include "./keypos.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE MINUS>; };

/ {
    behaviors {
        //////////////////////////////////////////////////////////////////
        // Positional Homerow mods
        // Homerow mods that prevent accidental activations when rolling keys,
        // such as when typing `st` or `ne` on colemak-dh layouts or `as` on
        // qwerty.
        //
        // Works by only allowing a mod to activate within tapping-term if
        // it's on the opposite side of the keyboard or on the same side thumb
        // keys.
        // Further optimization using urob's timerless homerow mods method:
        // https://github.com/urob/zmk-config#timeless-homerow-mods

        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <QUICK_TAP>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <QUICK_TAP>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };

        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.

        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <QUICK_TAP>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <QUICK_TAP>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };

        /////////////////////////////////////////////////////////////////////////////
        /*
        * Usage: &lt_balanced
        * Tap: key press
        * Hold: momentary layer
        */

        lt_balanced: lt_balanced {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <QUICK_TAP>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            // hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };

        /*
        * Usage: &lt_capsword
        * Tap: caps_word
        * Hold: momentary layer
        */

        lt_capsword: lt_caps_word {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&caps_word>;
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <QUICK_TAP>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            // hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };

        /////////////////////////////////////////////////////////////////////////////
        // Swap the default and the shifted
        /*
        * Usage: &mm_tilde
        * Tap: tilde(~)
        * Shifted Tap: grave(`)
        */

        mm_tilde: tilde_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp TILDE>, <&kp GRAVE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        /*
        * Usage: &mm_pipe
        * Tap: pipe(|)
        * Shifted Tap: backslash(\)
        */

        mm_pipe: pipe_backslash {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PIPE>, <&kp BSLH>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};

/////////////////////////////////////////////////////////////////////////////
// generated by keymap editor

/ {
    combos {
        compatible = "zmk,combos";

        toL0 {
            bindings = <&to 0>;
            key-positions = <6 7>;
            timeout-ms = <COMBO_TERM>;
            require-prior-idle-ms = <COMBO_IDLE>;
            layers = <0 1 2>;
        };

        toL1 {
            bindings = <&to 1>;
            key-positions = <7 8>;
            timeout-ms = <COMBO_TERM>;
            require-prior-idle-ms = <COMBO_IDLE>;
            layers = <0 1 2>;
        };

        toL2 {
            bindings = <&to 2>;
            key-positions = <8 9>;
            timeout-ms = <COMBO_TERM>;
            require-prior-idle-ms = <COMBO_IDLE>;
            layers = <0 1 2>;
        };

        kpMINUS {
            bindings = <&kp MINUS>;
            key-positions = <13 12>;
            timeout-ms = <COMBO_TERM>;
            require-prior-idle-ms = <COMBO_IDLE>;
            layers = <2>;
        };

        kpEQUAL {
            bindings = <&kp EQUAL>;
            key-positions = <11 12>;
            timeout-ms = <COMBO_TERM>;
            require-prior-idle-ms = <COMBO_IDLE>;
            layers = <2>;
        };

        kpDOT {
            bindings = <&kp DOT>;
            key-positions = <3 2>;
            timeout-ms = <COMBO_TERM>;
            require-prior-idle-ms = <COMBO_IDLE>;
            layers = <2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            label = "BASE";
            bindings = <
       &kp SQT       &kp COMMA            &kp DOT        &kp P         &kp Y       &kp F    &kp G         &kp C             &kp R                &kp L
       &hm_l LGUI A  &hm_shift_l LSHFT O  &hm_l LCTRL E  &hm_l LALT U  &kp I       &kp D    &hm_r RALT H  &hm_r RCTRL T     &hm_shift_r RSHFT N  &hm_r RGUI S
&none  &kp SEMI      &kp Q                &kp J          &kp K         &kp X       &kp B    &kp M         &kp W             &kp V                &kp Z         &none
                                          &kp ESC        &lt 1 SPACE   &kp BSPC    &kp RET  &lt 2 TAB     &lt_capsword 3 0
            >;
        };

        navigation-fn {
            label = "navfn";
            bindings = <
       &none     &mkp LCLK  &none     &mkp RCLK  &none     &kp F11  &msc SCRL_UP  &msc SCRL_DOWN  &msc SCRL_LEFT  &msc SCRL_RIGHT
       &kp LEFT  &kp RIGHT  &kp DOWN  &kp UP     &none     &kp F5   &mmv MOVE_UP  &mmv MOVE_DOWN  &mmv MOVE_LEFT  &mmv MOVE_RIGHT
&none  &none     &none      &none     &none      &none     &kp F2   &none         &none           &none           &none            &none
                            &trans    &trans     &trans    &trans   &trans        &trans
            >;
        };

        number-symbol {
            label = "numsym";
            bindings = <
       &kp N7     &kp N8    &kp N9    &kp N0    &kp N6      &none   &none     &none      &none      &none
       &kp N4     &kp N3    &kp N2    &kp N1    &kp N5      &none   &kp RALT  &kp RCTRL  &kp RSHFT  &kp RGUI
&none  &mm_tilde  &kp FSLH  &mm_pipe  &kp LBKT  &kp RBKT    &none   &none     &none      &none      &none     &none
                            &trans    &trans    &trans      &trans  &trans    &trans
            >;
        };

        adjustment {
            label = "adj";
            bindings = <
       &kp C_BRI_DN  &kp C_BRI_UP  &kp C_VOL_DN  &kp C_VOL_UP  &none             &none   &none   &none   &none  &none
       &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_SEL 4      &none   &none   &none   &none  &none
&none  &none         &none         &bt BT_CLR    &none         &bt BT_CLR_ALL    &none   &none   &none   &none  &none  &none
                                   &trans        &trans        &trans            &trans  &trans  &trans
            >;
        };
    };
};
